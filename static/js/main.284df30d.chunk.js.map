{"version":3,"sources":["settings/defaults.js","contexts/channelscontext.js","components/topbar/topbar.jsx","components/channellisting/channellisting.jsx","components/channelspanel/channelspanel.jsx","components/channelrow/channelrow.jsx","components/show/show.jsx","components/timeaxis/timeslot.jsx","components/timeaxis/timeaxis.jsx","components/maincontainer/maincontainer.jsx","App.js","serviceWorker.js","index.js"],"names":["DEFAULSTARTDATE","moment","DEFAULDISPLAYDATE","showsPages","shows1","shows2","shows3","shows4","shows5","shows6","reducer","state","action","type","payload","page","dateToDisplay","clone","add","format","valueOf","offsetTimeEnd","offset","channelsTemp","Array","map","item","key","channel","ChannelsDataset","result","channels","shows","filter","show","channelID","groupID","stop","isBefore","initialState","ChannelsContext","React","createContext","ChannelsProvider","props","useReducer","dispatch","Provider","value","children","TopBar","useContext","className","style","color","fontWeight","ChannelListing","logo","Tooltip","title","name","placement","data-id","width","alt","src","ChannelsPanel","ChannelRow","HtmlTooltip","withStyles","theme","tooltip","backgroundColor","maxWidth","border","Show","data","showWeight","length","opacity","parseFloat","toFixed","subtitle","start","slugify","genreID","replacement","lower","remove","genre","textOverflow","whiteSpace","overflow","TimeSlot","label","TimeAxis","hourValue","MainContainer","useEffect","id","onScroll","e","el","target","offsetWidth","scrollLeft","scrollWidth","parseInt","onWheel","preventDefault","container","document","getElementById","containerScrollPosition","scrollTo","top","left","deltaY","behaviour","beginning","set","h","m","minutesDiff","duration","diff","asMinutes","marginLeft","renderChannelRow","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.284df30d.chunk.js","sourcesContent":["import moment from \"moment\";\n\nexport const DEFAULTCHANNELSNUMBER = 4; //number of channels to display\nexport const DEFAULTTIMESLOTS = 6; //number of timeslots for the time axis\nexport const TIMESLOTWIDTH = 400; //default timeslot width\nexport const DEFAULSTARTDATE = moment('2018-07-27 00:00', 'YYYY-MM-DD HH:mm');\nexport const DEFAULDISPLAYDATE = moment('2018-07-27 00:00', 'YYYY-MM-DD HH:mm');","import React, { useReducer } from 'react';\nimport ChannelsDataset from '../assets/data/channels';\nimport shows1 from '../assets/data/1';\nimport shows2 from '../assets/data/2';\nimport shows3 from '../assets/data/3';\nimport shows4 from '../assets/data/4';\nimport shows5 from '../assets/data/5';\nimport shows6 from '../assets/data/6';\nimport { filter } from 'lodash';\nimport moment from 'moment';\nimport { DEFAULTCHANNELSNUMBER, DEFAULSTARTDATE, DEFAULDISPLAYDATE } from '../settings/defaults';\n\nconst showsPages = {\n\tshows1: shows1,\n\tshows2: shows2,\n\tshows3: shows3,\n\tshows4: shows4,\n\tshows5: shows5,\n\tshows6: shows6\n};\n\nconst reducer = (state, action) => {\n\tswitch (action.type) {\n\t\tcase 'LOADSHOWS':\n\t\t\tif (action.payload.page > 6) return; //preventive statement for our specific case of 6 datasets\n\n\t\t\tlet dateToDisplay = DEFAULDISPLAYDATE.clone().add(action.payload.page - 1, 'days').format('LL').valueOf();\n\n\t\t\tlet offsetTimeEnd = DEFAULSTARTDATE.add(\n\t\t\t\taction.payload.offset - (action.payload.page - 1) * 24,\n\t\t\t\t'hours'\n\t\t\t).add(action.payload.page - 1, 'days');\n\n\n\t\t\tlet channelsTemp = [];\n\t\t\t[...Array(DEFAULTCHANNELSNUMBER)].map((item, key) => {\n\t\t\t\tlet channel = ChannelsDataset.result.channels[key];\n\n\t\t\t\t//get the shows that are only less than a certain initial time\n\t\t\t\tlet shows = filter(\n\t\t\t\t\tshowsPages[`shows${action.payload.page}`].result,\n\t\t\t\t\tshow => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\tshow.channelID === channel.groupID &&\n\t\t\t\t\t\t\tmoment(show.stop).isBefore(offsetTimeEnd)\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\tchannel.shows = shows; //filling the shows inside their respective channel\n\t\t\t\treturn (channelsTemp = [...channelsTemp, channel]);\n\t\t\t});\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tchannels: channelsTemp,\n\t\t\t\toffset: state.offset + action.payload.offset,\n\t\t\t\tpage: action.payload.page,\n\t\t\t\tdateToDisplay: dateToDisplay\n\t\t\t};\n\n\t\tdefault:\n\t\t\tbreak;\n\t}\n};\n\nlet initialState = {\n\tchannels: [],\n\toffset: 0,\n\tpage: 1,\n\tdateToDisplay: DEFAULSTARTDATE.format('ll').valueOf()\n};\n\nconst ChannelsContext = React.createContext(initialState);\n\nconst ChannelsProvider = props => {\n\tconst [state, dispatch] = useReducer(reducer, initialState);\n\treturn (\n\t\t<ChannelsContext.Provider value={{ state, dispatch }}>\n\t\t\t{props.children}\n\t\t</ChannelsContext.Provider>\n\t);\n};\n\nexport { ChannelsContext, ChannelsProvider };\n","import React, { useContext } from 'react';\nimport './topbar.scss';\nimport { ChannelsContext } from '../../contexts/channelscontext';\n\nconst TopBar = () => {\n\tconst { state } = useContext(ChannelsContext);\n\treturn (\n\t\t<div className='topbarContainer'>\n\t\t\t<span style={{ color: 'red', fontWeight: 'bold' }}>\n\t\t\t\t{state.dateToDisplay}\n\t\t\t</span>\n\t\t</div>\n\t);\n};\n\nexport default TopBar;\n","import React from 'react';\nimport './channellisting.scss';\nimport { Tooltip } from '@material-ui/core';\n\nconst ChannelListing = ({ channel }) => {\n\tconst logo = `https://cdn.hd-plus.de/senderlogos/bright-cropped/${channel.groupID}.png`;\n\n\treturn (\n\t\t<Tooltip title={channel.name} placement='right'>\n\t\t\t<div\n\t\t\t\tclassName='channelListing'\n\t\t\t\tdata-id={channel.groupID}\n\t\t\t>\n\t\t\t\t<img style={{ width: '100%' }} alt={channel.name} src={logo} />\n\t\t\t</div>\n\t\t</Tooltip>\n\t);\n};\n\nexport default ChannelListing;\n","import React, { useContext } from 'react';\nimport './channelspanel.scss';\nimport ChannelListing from '../channellisting/channellisting';\nimport { ChannelsContext } from '../../contexts/channelscontext';\n\nconst ChannelsPanel = () => {\n\tconst { state } = useContext(ChannelsContext);\n\n\tconst renderChannelsListings = () => {\n\t\treturn state.channels.map((channel, key) => {\n\t\t\tconst { name, groupID } = channel;\n\t\t\treturn (\n\t\t\t\t<ChannelListing\n\t\t\t\t\tkey={key}\n\t\t\t\t\tchannel={{\n\t\t\t\t\t\tname: name,\n\t\t\t\t\t\tgroupID: groupID\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t);\n\t\t});\n\t};\n\n\treturn (\n\t\t<div className='channelsPanelContainer'>\n\t\t\t<div className='spacer'></div>\n\n\t\t\t{renderChannelsListings()}\n\t\t</div>\n\t);\n};\n\nexport default ChannelsPanel;\n","import React from 'react';\nimport './channelrow.scss';\n\nconst ChannelRow = (props) => {\n return (\n  <div className=\"channelRow\">\n   {props.children}\n  </div>\n );\n};\n\nexport default ChannelRow;","import React from 'react';\nimport './show.scss';\nimport { Tooltip, withStyles } from '@material-ui/core';\nimport { TIMESLOTWIDTH } from '../../settings/defaults';\nimport slugify from 'slugify';\nimport moment from 'moment';\n\nconst HtmlTooltip = withStyles(theme => ({\n\ttooltip: {\n\t\tbackgroundColor: '#2b3749',\n\t\tcolor: 'rgba(255, 255, 255, 0.87)',\n\t\tmaxWidth: 220,\n\t\tborder: '1px solid #dadde9'\n\t}\n}))(Tooltip);\n\nconst Show = props => {\n\tconst show = props.data;\n\n\tlet showWeight = (TIMESLOTWIDTH * show.length) / 60;\n\tlet opacity = parseFloat(showWeight / 1000).toFixed(2);\n\n\treturn (\n\t\t<HtmlTooltip\n\t\t\ttitle={\n\t\t\t\t<div>\n\t\t\t\t\t<h2>\n\t\t\t\t\t\t{show.title} -- <em>{show.length}m</em>\n\t\t\t\t\t</h2>\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<em>{show.subtitle}</em>\n\t\t\t\t\t</h3>\n\t\t\t\t\t<h4>Starts: {moment(show.start).format('YYYY-MM-DD HH:mm')} </h4>\n\t\t\t\t\t<h4>Ends: {moment(show.stop).format('YYYY-MM-DD HH:mm')} </h4>\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclassName={`genre ${slugify(show.genreID, {\n\t\t\t\t\t\t\t\treplacement: '',\n\t\t\t\t\t\t\t\tlower: true,\n\t\t\t\t\t\t\t\tremove: /[*+~.()'\"!:@]/g\n\t\t\t\t\t\t\t})}`}\n\t\t\t\t\t\t></div>\n\t\t\t\t\t\t{show.genre ? show.genre : show.genreID}\n\t\t\t\t\t</h4>\n\t\t\t\t</div>\n\t\t\t}\n\t\t\tplacement='top-start'\n\t\t>\n\t\t\t<div\n\t\t\t\tclassName={`showContainer ${slugify(show.genreID, {\n\t\t\t\t\treplacement: '',\n\t\t\t\t\tlower: true,\n\t\t\t\t\tremove: /[*+~.()'\"!:@]/g\n\t\t\t\t})}`}\n\t\t\t\tstyle={{\n\t\t\t\t\t...props.style,\n\t\t\t\t\twidth: showWeight,\n\t\t\t\t\tbackgroundColor: `rgba(76,57,196, ${opacity})`,\n\t\t\t\t\tcolor: showWeight < 500 ? '#2b3749' : '#ffffff' //to contras with the background\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<h3\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\ttextOverflow: 'ellipsis',\n\t\t\t\t\t\twhiteSpace: 'nowrap',\n\t\t\t\t\t\toverflow: 'hidden'\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{show.title}\n\t\t\t\t</h3>\n\t\t\t\t<h5\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\ttextOverflow: 'ellipsis',\n\t\t\t\t\t\twhiteSpace: 'nowrap',\n\t\t\t\t\t\toverflow: 'hidden'\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{show.length} minutes\n\t\t\t\t</h5>\n\t\t\t</div>\n\t\t</HtmlTooltip>\n\t);\n};\n\nexport default Show;\n","import React from 'react';\nimport { TIMESLOTWIDTH } from '../../settings/defaults';\n\nconst TimeSlot = props => {\n\treturn (\n\t\t<div className='timeSlotContainer' style={{ width: TIMESLOTWIDTH }}>\n\t\t\t<div className='timeSlot'>\n\t\t\t\t<span className='label'>{props.label}</span>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default TimeSlot;\n","import React, { useContext } from 'react';\nimport './timeaxis.scss';\nimport TimeSlot from './timeslot';\nimport { ChannelsContext } from '../../contexts/channelscontext';\n\nconst TimeAxis = () => {\n\tconst { state } = useContext(ChannelsContext);\n\n\tconst renderTimeSlots = () => {\n\t\treturn [...Array(state.offset - (state.page - 1) * 24)].map((item, key) => {\n\t\t\tlet hourValue = key % 24;\n\t\t\treturn (\n\t\t\t\t<TimeSlot\n\t\t\t\t\tkey={key}\n\t\t\t\t\tlabel={`${hourValue > 9 ? hourValue : `0${hourValue}`}:00`}\n\t\t\t\t/>\n\t\t\t);\n\t\t});\n\t};\n\treturn <div className='timeAxisContainer'>{renderTimeSlots()}</div>;\n};\n\nexport default TimeAxis;\n","import React, { useContext, useEffect } from 'react';\nimport './maincontainer.scss';\nimport ChannelRow from '../channelrow/channelrow';\nimport Show from '../show/show';\nimport TimeAxis from '../timeaxis/timeaxis';\nimport { ChannelsContext } from '../../contexts/channelscontext';\nimport moment from 'moment';\nimport { TIMESLOTWIDTH, DEFAULTTIMESLOTS } from '../../settings/defaults';\n\nconst MainContainer = props => {\n\tconst { state, dispatch } = useContext(ChannelsContext);\n\n\tuseEffect(() => {\n\t\tdispatch({\n\t\t\ttype: 'LOADSHOWS',\n\t\t\tpayload: {\n\t\t\t\toffset: DEFAULTTIMESLOTS,\n\t\t\t\tpage: 1\n\t\t\t}\n\t\t});\n\t}, [dispatch]);\n\n\t//! this is to know if the scroll has reached the end horizontally\n\tconst isEnd = el => {\n\t\treturn el.offsetWidth + el.scrollLeft === el.scrollWidth;\n\t};\n\tconst handleScroll = e => {\n\t\tif (isEnd(e.target)) {\n\t\t\t//!fetching more data\n\t\t\tdispatch({\n\t\t\t\ttype: 'LOADSHOWS',\n\t\t\t\tpayload: {\n\t\t\t\t\toffset: DEFAULTTIMESLOTS, //! we can change this value to fetch new data for an offset of time slots\n\t\t\t\t\tpage: parseInt((state.offset / 24)) + 1\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n\n\t//! the following event generates a warning in the console because it is a passive event\n\tconst handleWheel = e => {\n\t\te.preventDefault();\n\t\tlet container = document.getElementById('mainContainer');\n\t\tlet containerScrollPosition = document.getElementById('mainContainer')\n\t\t\t.scrollLeft;\n\t\tcontainer.scrollTo({\n\t\t\ttop: 0,\n\t\t\tleft: containerScrollPosition + e.deltaY,\n\t\t\tbehaviour: 'smooth' //if you want smooth scrolling\n\t\t});\n\t};\n\n\tconst renderChannelRow = (channel, key) => {\n\t\treturn (\n\t\t\t<ChannelRow key={key}>\n\t\t\t\t{channel.shows.map((show, key) => {\n\t\t\t\t\tif (key === 0) {\n\t\t\t\t\t\t//if it is the first show of the day, it might start later than 00:00 because there will be a show from the previous day still running\n\t\t\t\t\t\tlet beginning = moment(show.start).set({ h: '00', m: '00' }); //this is just to set the date of the concerned day and default it to time 00:00\n\n\t\t\t\t\t\t//calculating how many minutes are before the show starts to cover the grid.\n\t\t\t\t\t\tlet minutesDiff = moment\n\t\t\t\t\t\t\t.duration(moment(show.start).diff(beginning))\n\t\t\t\t\t\t\t.asMinutes();\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<Show\n\t\t\t\t\t\t\t\tkey={key}\n\t\t\t\t\t\t\t\tdata={show}\n\t\t\t\t\t\t\t\tstyle={{ marginLeft: (TIMESLOTWIDTH * minutesDiff) / 60 }}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn <Show key={key} data={show} />;\n\t\t\t\t\t}\n\t\t\t\t})}\n\t\t\t</ChannelRow>\n\t\t);\n\t};\n\n\treturn (\n\t\t<div\n\t\t\tid='mainContainer'\n\t\t\tclassName='mainContainer'\n\t\t\tonScroll={handleScroll}\n\t\t\tonWheel={handleWheel}\n\t\t>\n\t\t\t<div className='spacer'>\n\t\t\t\t<TimeAxis />\n\t\t\t</div>\n\n\t\t\t{state.channels.map((channel, key) => {\n\t\t\t\treturn renderChannelRow(channel, key);\n\t\t\t})}\n\t\t</div>\n\t);\n};\n\nexport default MainContainer;\n","import React from 'react';\n\nimport './App.scss';\nimport TopBar from './components/topbar/topbar';\nimport ChannelsPanel from './components/channelspanel/channelspanel';\nimport MainContainer from './components/maincontainer/maincontainer';\nimport { ChannelsProvider } from './contexts/channelscontext';\n\nconst App = () => {\n\n  \n\n  return (\n    <ChannelsProvider>\n      <div className=\"App\">\n        <TopBar />\n        <div className='epgContainer'>\n          <ChannelsPanel />\n          <MainContainer />\n        </div>\n      </div>\n    </ChannelsProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}